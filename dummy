import pandas as pd
import numpy as np
import calendar
from pandas.tseries.holiday import USFederalHolidayCalendar

# -------------- LOAD DATA -----------------
# df must have at least a 'timestamp' column in datetime format
# and a 'cluster' column indicating KMeans cluster assignment
#
# Example:
# df = pd.read_csv("your_file.csv")
# df['timestamp'] = pd.to_datetime(df['timestamp'])

# -------------- ENRICH DATA -----------------
df['timestamp'] = pd.to_datetime(df['timestamp'])
df['date'] = df['timestamp'].dt.date
df['day_of_week'] = df['timestamp'].dt.dayofweek
df['day'] = df['timestamp'].dt.day
df['month'] = df['timestamp'].dt.month
df['year'] = df['timestamp'].dt.year

# -------------- PATTERN CHECKING UTILS -----------------
def pattern_with_tolerance(fn, threshold=0.9):
    def wrapper(cluster_df):
        mask = fn(cluster_df)
        return mask.sum() / len(cluster_df) >= threshold
    return wrapper

# 1. Same day of week
def same_weekday_mask(df):
    mode_day = df['day_of_week'].mode()[0]
    return df['day_of_week'] == mode_day

# 2. Nieme occurrence of weekday in month
def get_weekday_occurrence_in_month(row):
    weekday = row['day_of_week']
    month_days = pd.date_range(start=f"{row['year']}-{row['month']:02d}-01", 
                               end=f"{row['year']}-{row['month']:02d}-{calendar.monthrange(row['year'], row['month'])[1]}")
    same_weekdays = [d for d in month_days if d.weekday() == weekday]
    return sum(d.day <= row['day'] for d in same_weekdays)

df['weekday_occurrence'] = df.apply(get_weekday_occurrence_in_month, axis=1)

def nth_weekday_occurrence_mask(df):
    mode = df.groupby(['day_of_week'])['weekday_occurrence'].agg(lambda x: x.mode().iloc[0])
    return df.apply(lambda row: row['weekday_occurrence'] == mode.get(row['day_of_week'], -1), axis=1)

# 3. Every calendar day (tolerant)
def calendar_day_mask(df):
    all_days = set(range(1, df['timestamp'].dt.days_in_month.max() + 1))
    present_days = set(df['day'].unique())
    missing = all_days - present_days
    return df['day'].isin(all_days - missing)

# 4. Every business day
def business_day_mask(df):
    bdays = pd.bdate_range(start=df['timestamp'].min().date(), end=df['timestamp'].max().date())
    valid_dates = set(bdays.date)
    return df['date'].isin(valid_dates)

# 5. Nieme business day of month
def get_business_day_rank(row):
    year, month = row['year'], row['month']
    bdays = pd.bdate_range(start=f"{year}-{month:02d}-01", 
                           end=f"{year}-{month:02d}-{calendar.monthrange(year, month)[1]}")
    try:
        return np.where(bdays.date == row['date'])[0][0] + 1
    except:
        return np.nan

df['bizday_rank'] = df.apply(get_business_day_rank, axis=1)

def nth_business_day_mask(df):
    mode = df['bizday_rank'].mode()[0]
    return df['bizday_rank'] == mode

# 6. Last business day of month
def is_last_business_day_of_month(date):
    year, month = date.year, date.month
    bdays = pd.bdate_range(start=f"{year}-{month:02d}-01", 
                           end=f"{year}-{month:02d}-{calendar.monthrange(year, month)[1]}")
    return date == bdays[-1].date()

df['is_last_bizday'] = df['date'].apply(is_last_business_day_of_month)

def last_bizday_mask(df):
    return df['is_last_bizday']

# 7. Last weekday occurrence of the month
def is_last_weekday_occurrence(date):
    weekday = date.weekday()
    last_day = calendar.monthrange(date.year, date.month)[1]
    last_date = pd.Timestamp(f"{date.year}-{date.month}-{last_day}")
    while last_date.weekday() != weekday:
        last_date -= pd.Timedelta(days=1)
    return date == last_date.date()

df['is_last_weekday_of_month'] = df['date'].apply(is_last_weekday_occurrence)

def last_weekday_of_month_mask(df):
    return df['is_last_weekday_of_month']

# -------------- ANALYZE EACH CLUSTER -----------------
tolerance_threshold = 0.9  # allow 10% noise
results = []

for cluster_id, group in df.groupby('cluster'):
    result = {
        'cluster': cluster_id,
        'same_weekday': pattern_with_tolerance(same_weekday_mask, tolerance_threshold)(group),
        'nth_weekday_occurrence': pattern_with_tolerance(nth_weekday_occurrence_mask, tolerance_threshold)(group),
        'every_calendar_day': pattern_with_tolerance(calendar_day_mask, tolerance_threshold)(group),
        'every_business_day': pattern_with_tolerance(business_day_mask, tolerance_threshold)(group),
        'nth_business_day': pattern_with_tolerance(nth_business_day_mask, tolerance_threshold)(group),
        'last_business_day': pattern_with_tolerance(last_bizday_mask, tolerance_threshold)(group),
        'last_weekday_in_month': pattern_with_tolerance(last_weekday_of_month_mask, tolerance_threshold)(group)
    }
    results.append(result)

pattern_df = pd.DataFrame(results)
print(pattern_df)


cluster_id = 12
tolerance = 0.8

# Filter the cluster
cluster_12 = df[df['cluster'] == cluster_id]

# Most common weekday
dominant_weekday = cluster_12['day_of_week'].mode()[0]

# Human-readable weekday name
weekday_name = calendar.day_name[dominant_weekday]

# Count how many files arrived on that weekday
count_on_dominant_day = (cluster_12['day_of_week'] == dominant_weekday).sum()
total_files = len(cluster_12)
percentage = count_on_dominant_day / total_files

print(f"Cluster {cluster_id}:")
print(f"  ðŸ“… Dominant weekday: {weekday_name} (code {dominant_weekday})")
print(f"  âœ… {count_on_dominant_day} out of {total_files} files ({percentage:.1%}) arrived on that weekday.")
print(f"  âœ… Tolerance threshold = {tolerance}, met = {percentage >= tolerance}")
